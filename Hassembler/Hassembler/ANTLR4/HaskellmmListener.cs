//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Haskellmm.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="HaskellmmParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IHaskellmmListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="HaskellmmParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] HaskellmmParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="HaskellmmParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] HaskellmmParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntVar([NotNull] HaskellmmParser.IntVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntVar([NotNull] HaskellmmParser.IntVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultExp([NotNull] HaskellmmParser.MultExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultExp([NotNull] HaskellmmParser.MultExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExp([NotNull] HaskellmmParser.ParenExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExp([NotNull] HaskellmmParser.ParenExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExp([NotNull] HaskellmmParser.AddExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExp([NotNull] HaskellmmParser.AddExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>fRefVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFRefVar([NotNull] HaskellmmParser.FRefVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>fRefVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFRefVar([NotNull] HaskellmmParser.FRefVarContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="HaskellmmParser.f_defi"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterF_defi([NotNull] HaskellmmParser.F_defiContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="HaskellmmParser.f_defi"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitF_defi([NotNull] HaskellmmParser.F_defiContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="HaskellmmParser.f_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterF_name([NotNull] HaskellmmParser.F_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="HaskellmmParser.f_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitF_name([NotNull] HaskellmmParser.F_nameContext context);
}
