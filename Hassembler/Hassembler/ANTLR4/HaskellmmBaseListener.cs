//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Haskellmm.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IHaskellmmListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class HaskellmmBaseListener : IHaskellmmListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="HaskellmmParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] HaskellmmParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="HaskellmmParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] HaskellmmParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="HaskellmmParser.referenceExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReferenceExp([NotNull] HaskellmmParser.ReferenceExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="HaskellmmParser.referenceExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReferenceExp([NotNull] HaskellmmParser.ReferenceExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>refVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRefVar([NotNull] HaskellmmParser.RefVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>refVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRefVar([NotNull] HaskellmmParser.RefVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exp</c>
	/// labeled alternative in <see cref="HaskellmmParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExp([NotNull] HaskellmmParser.ExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exp</c>
	/// labeled alternative in <see cref="HaskellmmParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExp([NotNull] HaskellmmParser.ExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolVar([NotNull] HaskellmmParser.BoolVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolVar([NotNull] HaskellmmParser.BoolVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>intVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntVar([NotNull] HaskellmmParser.IntVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>intVar</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntVar([NotNull] HaskellmmParser.IntVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultExp([NotNull] HaskellmmParser.MultExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultExp([NotNull] HaskellmmParser.MultExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>compExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompExp([NotNull] HaskellmmParser.CompExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>compExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompExp([NotNull] HaskellmmParser.CompExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExp([NotNull] HaskellmmParser.ParenExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExp([NotNull] HaskellmmParser.ParenExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddExp([NotNull] HaskellmmParser.AddExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddExp([NotNull] HaskellmmParser.AddExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>refExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRefExp([NotNull] HaskellmmParser.RefExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>refExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRefExp([NotNull] HaskellmmParser.RefExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>iteExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIteExp([NotNull] HaskellmmParser.IteExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>iteExp</c>
	/// labeled alternative in <see cref="HaskellmmParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIteExp([NotNull] HaskellmmParser.IteExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="HaskellmmParser.f_defi"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterF_defi([NotNull] HaskellmmParser.F_defiContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="HaskellmmParser.f_defi"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitF_defi([NotNull] HaskellmmParser.F_defiContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="HaskellmmParser.ite_defi"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIte_defi([NotNull] HaskellmmParser.Ite_defiContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="HaskellmmParser.ite_defi"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIte_defi([NotNull] HaskellmmParser.Ite_defiContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
