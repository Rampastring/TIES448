//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Haskellmm.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class HaskellmmLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, IF=8, THEN=9, 
		ELSE=10, NEWLINE=11, INT=12, BOOL=13, CHAR=14, F_NAME=15, R_VAR=16, WS=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "IF", "THEN", 
		"ELSE", "NEWLINE", "INT", "BOOL", "CHAR", "F_NAME", "R_VAR", "WS"
	};


	public HaskellmmLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HaskellmmLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", "'='", "'if'", "'then'", 
		"'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "IF", "THEN", "ELSE", 
		"NEWLINE", "INT", "BOOL", "CHAR", "F_NAME", "R_VAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Haskellmm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static HaskellmmLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', 'n', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x6', 
		'\f', '\x42', '\n', '\f', '\r', '\f', '\xE', '\f', '\x43', '\x3', '\r', 
		'\x6', '\r', 'G', '\n', '\r', '\r', '\r', '\xE', '\r', 'H', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'T', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\\', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '_', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x63', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x66', '\v', '\x11', 
		'\x3', '\x12', '\x6', '\x12', 'i', '\n', '\x12', '\r', '\x12', '\xE', 
		'\x12', 'j', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', 
		'\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', 
		'\x13', '\x3', '\x2', '\t', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x3', 
		'\x2', '\x32', ';', '\x3', '\x2', ')', ')', '\x4', '\x2', '\x43', '\\', 
		'\x63', '|', '\x3', '\x2', '\x63', '|', '\x6', '\x2', ')', ')', '\x32', 
		';', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', '\xF', 
		'\"', '\"', '\x2', 's', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '%', '\x3', '\x2', '\x2', '\x2', '\x5', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\a', ')', '\x3', '\x2', '\x2', '\x2', '\t', '+', '\x3', 
		'\x2', '\x2', '\x2', '\v', '-', '\x3', '\x2', '\x2', '\x2', '\r', '/', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x33', '\x3', '\x2', '\x2', '\x2', '\x13', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x15', ';', '\x3', '\x2', '\x2', '\x2', '\x17', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', 'S', '\x3', '\x2', '\x2', '\x2', '\x1D', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', 'Y', '\x3', '\x2', '\x2', '\x2', '!', '`', '\x3', '\x2', 
		'\x2', '\x2', '#', 'h', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '*', 
		'\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 
		'+', '\x2', '\x2', '(', '\x6', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', 
		',', '\x2', '\x2', '*', '\b', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', 
		'\x31', '\x2', '\x2', ',', '\n', '\x3', '\x2', '\x2', '\x2', '-', '.', 
		'\a', '-', '\x2', '\x2', '.', '\f', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\a', '/', '\x2', '\x2', '\x30', '\xE', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\a', '?', '\x2', '\x2', '\x32', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\a', 'k', '\x2', '\x2', '\x34', '\x35', '\a', 
		'h', '\x2', '\x2', '\x35', '\x12', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\a', 'v', '\x2', '\x2', '\x37', '\x38', '\a', 'j', '\x2', '\x2', 
		'\x38', '\x39', '\a', 'g', '\x2', '\x2', '\x39', ':', '\a', 'p', '\x2', 
		'\x2', ':', '\x14', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', 'g', '\x2', 
		'\x2', '<', '=', '\a', 'n', '\x2', '\x2', '=', '>', '\a', 'u', '\x2', 
		'\x2', '>', '?', '\a', 'g', '\x2', '\x2', '?', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x42', '\t', '\x2', '\x2', '\x2', '\x41', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x18', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\t', '\x3', 
		'\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'I', '\x1A', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\a', 'V', '\x2', '\x2', 'K', 'L', '\a', 't', '\x2', '\x2', 'L', 
		'M', '\a', 'w', '\x2', '\x2', 'M', 'T', '\a', 'g', '\x2', '\x2', 'N', 
		'O', '\a', 'H', '\x2', '\x2', 'O', 'P', '\a', '\x63', '\x2', '\x2', 'P', 
		'Q', '\a', 'n', '\x2', '\x2', 'Q', 'R', '\a', 'u', '\x2', '\x2', 'R', 
		'T', '\a', 'g', '\x2', '\x2', 'S', 'J', '\x3', '\x2', '\x2', '\x2', 'S', 
		'N', '\x3', '\x2', '\x2', '\x2', 'T', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\t', '\x4', '\x2', '\x2', 'V', 'W', '\t', '\x5', '\x2', '\x2', 
		'W', 'X', '\t', '\x4', '\x2', '\x2', 'X', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'Y', ']', '\t', '\x6', '\x2', '\x2', 'Z', '\\', '\t', '\a', '\x2', 
		'\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', 
		'\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', ' ', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x64', '\t', '\x6', '\x2', '\x2', '\x61', '\x63', 
		'\t', '\a', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'g', 'i', '\t', '\b', '\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\b', '\x12', '\x2', '\x2', 'm', '$', '\x3', '\x2', '\x2', '\x2', 
		'\t', '\x2', '\x43', 'H', 'S', ']', '\x64', 'j', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
