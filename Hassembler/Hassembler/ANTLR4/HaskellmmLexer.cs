//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Haskellmm.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class HaskellmmLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, IF=13, THEN=14, ELSE=15, NEWLINE=16, INT=17, 
		BOOL=18, CHAR=19, R_VAR=20, WS=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "IF", "THEN", "ELSE", "NEWLINE", "INT", "BOOL", 
		"CHAR", "R_VAR", "WS"
	};


	public HaskellmmLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HaskellmmLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", "'<'", "'<='", "'=='", 
		"'>='", "'>'", "'='", "'if'", "'then'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "IF", "THEN", "ELSE", "NEWLINE", "INT", "BOOL", "CHAR", "R_VAR", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Haskellmm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static HaskellmmLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x17', '|', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x6', '\x11', 'W', '\n', '\x11', '\r', '\x11', '\xE', '\x11', 
		'X', '\x3', '\x12', '\x6', '\x12', '\\', '\n', '\x12', '\r', '\x12', '\xE', 
		'\x12', ']', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', 'i', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 'q', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', 't', '\v', '\x15', '\x3', '\x16', 
		'\x6', '\x16', 'w', '\n', '\x16', '\r', '\x16', '\xE', '\x16', 'x', '\x3', 
		'\x16', '\x3', '\x16', '\x2', '\x2', '\x17', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', 
		'\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', 
		'\x14', '\'', '\x15', ')', '\x16', '+', '\x17', '\x3', '\x2', '\t', '\x4', 
		'\x2', '\f', '\f', '\xF', '\xF', '\x3', '\x2', '\x32', ';', '\x3', '\x2', 
		')', ')', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x3', '\x2', '\x63', 
		'|', '\x6', '\x2', ')', ')', '\x32', ';', '\x43', '\\', '\x63', '|', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '\x80', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x3', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '/', '\x3', '\x2', '\x2', '\x2', '\a', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\t', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x35', '\x3', '\x2', '\x2', '\x2', '\r', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x39', '\x3', '\x2', '\x2', '\x2', '\x11', 
		';', '\x3', '\x2', '\x2', '\x2', '\x13', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x41', '\x3', '\x2', '\x2', '\x2', '\x17', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x46', '\x3', '\x2', '\x2', '\x2', '\x1B', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', 'K', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'P', '\x3', '\x2', '\x2', '\x2', '!', 'V', '\x3', '\x2', '\x2', '\x2', 
		'#', '[', '\x3', '\x2', '\x2', '\x2', '%', 'h', '\x3', '\x2', '\x2', '\x2', 
		'\'', 'j', '\x3', '\x2', '\x2', '\x2', ')', 'n', '\x3', '\x2', '\x2', 
		'\x2', '+', 'v', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '*', '\x2', 
		'\x2', '.', '\x4', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '+', 
		'\x2', '\x2', '\x30', '\x6', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\a', ',', '\x2', '\x2', '\x32', '\b', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\x31', '\x2', '\x2', '\x34', '\n', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\a', '-', '\x2', '\x2', '\x36', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\a', '/', '\x2', '\x2', '\x38', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '>', '\x2', '\x2', ':', 
		'\x10', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '>', '\x2', '\x2', 
		'<', '=', '\a', '?', '\x2', '\x2', '=', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '?', '\x2', '\x2', '?', '@', '\a', '?', '\x2', '\x2', 
		'@', '\x14', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '@', '\x2', 
		'\x2', '\x42', '\x43', '\a', '?', '\x2', '\x2', '\x43', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\a', '@', '\x2', '\x2', '\x45', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '?', '\x2', '\x2', 
		'G', '\x1A', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', 'k', '\x2', '\x2', 
		'I', 'J', '\a', 'h', '\x2', '\x2', 'J', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\a', 'v', '\x2', '\x2', 'L', 'M', '\a', 'j', '\x2', '\x2', 
		'M', 'N', '\a', 'g', '\x2', '\x2', 'N', 'O', '\a', 'p', '\x2', '\x2', 
		'O', '\x1E', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', 'g', '\x2', '\x2', 
		'Q', 'R', '\a', 'n', '\x2', '\x2', 'R', 'S', '\a', 'u', '\x2', '\x2', 
		'S', 'T', '\a', 'g', '\x2', '\x2', 'T', ' ', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\t', '\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\"', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\\', '\t', '\x3', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '$', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\a', 'V', '\x2', '\x2', '`', '\x61', '\a', 't', 
		'\x2', '\x2', '\x61', '\x62', '\a', 'w', '\x2', '\x2', '\x62', 'i', '\a', 
		'g', '\x2', '\x2', '\x63', '\x64', '\a', 'H', '\x2', '\x2', '\x64', '\x65', 
		'\a', '\x63', '\x2', '\x2', '\x65', '\x66', '\a', 'n', '\x2', '\x2', '\x66', 
		'g', '\a', 'u', '\x2', '\x2', 'g', 'i', '\a', 'g', '\x2', '\x2', 'h', 
		'_', '\x3', '\x2', '\x2', '\x2', 'h', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'i', '&', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\t', '\x4', '\x2', '\x2', 
		'k', 'l', '\t', '\x5', '\x2', '\x2', 'l', 'm', '\t', '\x4', '\x2', '\x2', 
		'm', '(', '\x3', '\x2', '\x2', '\x2', 'n', 'r', '\t', '\x6', '\x2', '\x2', 
		'o', 'q', '\t', '\a', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', '*', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\t', '\b', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\b', '\x16', '\x2', '\x2', 
		'{', ',', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', 'X', ']', 'h', 'r', 
		'x', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
