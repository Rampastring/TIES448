//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Haskellmm.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class HaskellmmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, IF=14, THEN=15, ELSE=16, NEWLINE=17, 
		INT=18, BOOL=19, CHAR=20, R_VAR=21, WS=22;
	public const int
		RULE_prog = 0, RULE_referenceExp = 1, RULE_param = 2, RULE_expr = 3, RULE_f_defi = 4, 
		RULE_ite_defi = 5;
	public static readonly string[] ruleNames = {
		"prog", "referenceExp", "param", "expr", "f_defi", "ite_defi"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", "'<'", "'<='", "'=='", 
		"'!='", "'>='", "'>'", "'='", "'if'", "'then'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "IF", "THEN", "ELSE", "NEWLINE", "INT", "BOOL", "CHAR", "R_VAR", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Haskellmm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static HaskellmmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HaskellmmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HaskellmmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public F_defiContext[] f_defi() {
			return GetRuleContexts<F_defiContext>();
		}
		public F_defiContext f_defi(int i) {
			return GetRuleContext<F_defiContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(HaskellmmParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(HaskellmmParser.NEWLINE, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==R_VAR) {
				{
				{
				State = 12; f_defi();
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 13; Match(NEWLINE);
					}
					}
					State = 18;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceExpContext : ParserRuleContext {
		public ITerminalNode R_VAR() { return GetToken(HaskellmmParser.R_VAR, 0); }
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ReferenceExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterReferenceExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitReferenceExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceExpContext referenceExp() {
		ReferenceExpContext _localctx = new ReferenceExpContext(Context, State);
		EnterRule(_localctx, 2, RULE_referenceExp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(R_VAR);
			State = 28;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 25; param();
					}
					} 
				}
				State = 30;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
	 
		public ParamContext() { }
		public virtual void CopyFrom(ParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RefVarContext : ParamContext {
		public ITerminalNode R_VAR() { return GetToken(HaskellmmParser.R_VAR, 0); }
		public RefVarContext(ParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterRefVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitRefVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpContext : ParamContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpContext(ParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 4, RULE_param);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new RefVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; Match(R_VAR);
				}
				break;
			case 2:
				_localctx = new ExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolVarContext : ExprContext {
		public ITerminalNode BOOL() { return GetToken(HaskellmmParser.BOOL, 0); }
		public BoolVarContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterBoolVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitBoolVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntVarContext : ExprContext {
		public ITerminalNode INT() { return GetToken(HaskellmmParser.INT, 0); }
		public IntVarContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterIntVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitIntVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultExpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterMultExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitMultExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompExpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterCompExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitCompExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterParenExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitParenExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddExpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterAddExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitAddExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RefExpContext : ExprContext {
		public ReferenceExpContext referenceExp() {
			return GetRuleContext<ReferenceExpContext>(0);
		}
		public RefExpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterRefExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitRefExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IteExpContext : ExprContext {
		public Ite_defiContext ite_defi() {
			return GetRuleContext<Ite_defiContext>(0);
		}
		public IteExpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterIteExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitIteExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new ParenExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 36; Match(T__0);
				State = 37; expr(0);
				State = 38; Match(T__1);
				}
				break;
			case R_VAR:
				{
				_localctx = new RefExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 40; referenceExp();
				}
				break;
			case IF:
				{
				_localctx = new IteExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41; ite_defi();
				}
				break;
			case INT:
				{
				_localctx = new IntVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42; Match(INT);
				}
				break;
			case BOOL:
				{
				_localctx = new BoolVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 57;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 55;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new MultExpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 46;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 47;
						_la = TokenStream.LA(1);
						if ( !(_la==T__2 || _la==T__3) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 48; expr(6);
						}
						break;
					case 2:
						{
						_localctx = new AddExpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 49;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 50;
						_la = TokenStream.LA(1);
						if ( !(_la==T__4 || _la==T__5) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 51; expr(5);
						}
						break;
					case 3:
						{
						_localctx = new CompExpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 53;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 54; expr(4);
						}
						break;
					}
					} 
				}
				State = 59;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class F_defiContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] R_VAR() { return GetTokens(HaskellmmParser.R_VAR); }
		public ITerminalNode R_VAR(int i) {
			return GetToken(HaskellmmParser.R_VAR, i);
		}
		public F_defiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f_defi; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterF_defi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitF_defi(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF_defi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F_defiContext f_defi() {
		F_defiContext _localctx = new F_defiContext(Context, State);
		EnterRule(_localctx, 8, RULE_f_defi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 60; Match(R_VAR);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==R_VAR );
			State = 65; Match(T__12);
			State = 66; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ite_defiContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(HaskellmmParser.IF, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(HaskellmmParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(HaskellmmParser.ELSE, 0); }
		public Ite_defiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ite_defi; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.EnterIte_defi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellmmListener typedListener = listener as IHaskellmmListener;
			if (typedListener != null) typedListener.ExitIte_defi(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellmmVisitor<TResult> typedVisitor = visitor as IHaskellmmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIte_defi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ite_defiContext ite_defi() {
		Ite_defiContext _localctx = new Ite_defiContext(Context, State);
		EnterRule(_localctx, 10, RULE_ite_defi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(IF);
			State = 69; expr(0);
			State = 70; Match(THEN);
			State = 71; expr(0);
			State = 72; Match(ELSE);
			State = 73; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', 'N', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x11', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x14', '\v', 
		'\x2', '\a', '\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1D', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', ' ', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '$', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '/', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', ':', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '=', '\v', '\x5', '\x3', '\x6', '\x6', '\x6', '@', '\n', 
		'\x6', '\r', '\x6', '\xE', '\x6', '\x41', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x2', '\x3', '\b', '\b', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x5', '\x3', '\x2', '\x5', 
		'\x6', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\t', '\xE', '\x2', 'S', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '#', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', 
		'\x2', '\x2', '\x2', '\n', '?', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x12', '\x5', '\n', '\x6', '\x2', 
		'\xF', '\x11', '\a', '\x13', '\x2', '\x2', '\x10', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x14', '\x3', '\x2', '\x2', '\x2', '\x12', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x16', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\xE', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1E', 
		'\a', '\x17', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\x6', '\x4', '\x2', 
		'\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x1E', '\x3', '\x2', '\x2', '\x2', '!', '$', '\a', '\x17', '\x2', 
		'\x2', '\"', '$', '\x5', '\b', '\x5', '\x2', '#', '!', '\x3', '\x2', '\x2', 
		'\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '\a', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\b', '\x5', '\x1', '\x2', '&', '\'', '\a', '\x3', 
		'\x2', '\x2', '\'', '(', '\x5', '\b', '\x5', '\x2', '(', ')', '\a', '\x4', 
		'\x2', '\x2', ')', '/', '\x3', '\x2', '\x2', '\x2', '*', '/', '\x5', '\x4', 
		'\x3', '\x2', '+', '/', '\x5', '\f', '\a', '\x2', ',', '/', '\a', '\x14', 
		'\x2', '\x2', '-', '/', '\a', '\x15', '\x2', '\x2', '.', '%', '\x3', '\x2', 
		'\x2', '\x2', '.', '*', '\x3', '\x2', '\x2', '\x2', '.', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', 
		'\x2', '\x2', '/', ';', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\f', 
		'\a', '\x2', '\x2', '\x31', '\x32', '\t', '\x2', '\x2', '\x2', '\x32', 
		':', '\x5', '\b', '\x5', '\b', '\x33', '\x34', '\f', '\x6', '\x2', '\x2', 
		'\x34', '\x35', '\t', '\x3', '\x2', '\x2', '\x35', ':', '\x5', '\b', '\x5', 
		'\a', '\x36', '\x37', '\f', '\x5', '\x2', '\x2', '\x37', '\x38', '\t', 
		'\x4', '\x2', '\x2', '\x38', ':', '\x5', '\b', '\x5', '\x6', '\x39', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x36', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '\t', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', 
		'\x2', '\x2', '\x2', '>', '@', '\a', '\x17', '\x2', '\x2', '?', '>', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', 
		'\xF', '\x2', '\x2', '\x44', '\x45', '\x5', '\b', '\x5', '\x2', '\x45', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x10', '\x2', '\x2', 
		'G', 'H', '\x5', '\b', '\x5', '\x2', 'H', 'I', '\a', '\x11', '\x2', '\x2', 
		'I', 'J', '\x5', '\b', '\x5', '\x2', 'J', 'K', '\a', '\x12', '\x2', '\x2', 
		'K', 'L', '\x5', '\b', '\x5', '\x2', 'L', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x12', '\x17', '\x1E', '#', '.', '\x39', ';', '\x41',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
